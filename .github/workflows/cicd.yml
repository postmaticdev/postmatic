# .github/workflows/cicd.yml
name: CI/CD Postmatic

on:
  push:
    branches: [stg, main]   # stg=staging, main=production
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (staging|production)"
        required: true
        default: "staging"
      ref:
        description: "Git ref (branch/tag/sha) to build"
        required: false

permissions:
  contents: read
  packages: write

concurrency:
  group: postmatic-${{ github.ref_name }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  # Tentukan ENV_NAME sekali, supaya bisa dipakai untuk 'environment:' di job lain
  resolve-env:
    runs-on: ubuntu-latest
    outputs:
      ENV_NAME: ${{ steps.setenv.outputs.ENV_NAME }}
      REF: ${{ steps.setenv.outputs.REF }}
    steps:
      - id: setenv
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ inputs.environment }}" ]]; then
            ENV_NAME="${{ inputs.environment }}"
            REF="${{ inputs.ref || github.ref }}"
          else
            case "${{ github.ref_name }}" in
              stg)  ENV_NAME="staging" ;;
              main) ENV_NAME="production" ;;
              *)    echo "Unsupported branch: ${{ github.ref_name }}"; exit 1 ;;
            esac
            REF="${{ github.ref }}"
          fi
          echo "ENV_NAME=$ENV_NAME" >> "$GITHUB_OUTPUT"
          echo "REF=$REF"           >> "$GITHUB_OUTPUT"

  build-and-push:
    runs-on: ubuntu-latest
    needs: resolve-env
    # Penting: ikat ke Environment agar secrets environment-scoped bisa diakses
    environment: ${{ needs.resolve-env.outputs.ENV_NAME }}
    timeout-minutes: 60
    outputs:
      ENV_NAME:  ${{ needs.resolve-env.outputs.ENV_NAME }}
      SHORT_SHA: ${{ steps.meta.outputs.SHORT_SHA }}
      NS:        ${{ steps.ns.outputs.NS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.resolve-env.outputs.REF }}

      - name: Compute metadata
        id: meta
        shell: bash
        run: |
          echo "SHORT_SHA=$(git rev-parse --short=8 HEAD)" >> "$GITHUB_OUTPUT"

      - name: Compute image namespace (GHCR)
        id: ns
        shell: bash
        run: |
          echo "NS=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"
          echo "Using namespace: ghcr.io/${GITHUB_REPOSITORY_OWNER,,}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ===== Tulis file .env FE dari secrets environment-scoped =====
      - name: Write dashboard env
        run: |
          mkdir -p apps/dashboard
          printf "%s" "${{ secrets.DASHBOARD_ENV }}" \
            | sed -E 's/\r$//' \
            | sed -E 's/^[[:space:]]*export[[:space:]]+//' \
            | sed -E 's/^[[:space:]]*([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*=[[:space:]]*/\1=/' \
            > "apps/dashboard/.env.${{ needs.resolve-env.outputs.ENV_NAME }}"
          echo "[dashboard .env size]"; wc -c "apps/dashboard/.env.${{ needs.resolve-env.outputs.ENV_NAME }}"
          echo "[dashboard keys]"
          sed -En 's/^[[:space:]]*(export[[:space:]]+)?([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*=.*/\2/p' "apps/dashboard/.env.${{ needs.resolve-env.outputs.ENV_NAME }}" | sort -u | head -n 50

      - name: Write landing env
        run: |
          mkdir -p apps/landing-page
          printf "%s" "${{ secrets.LANDING_ENV }}" \
            | sed -E 's/\r$//' \
            | sed -E 's/^[[:space:]]*export[[:space:]]+//' \
            | sed -E 's/^[[:space:]]*([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*=[[:space:]]*/\1=/' \
            > "apps/landing-page/.env.${{ needs.resolve-env.outputs.ENV_NAME }}"
          echo "[landing .env size]"; wc -c "apps/landing-page/.env.${{ needs.resolve-env.outputs.ENV_NAME }}"
          echo "[landing keys]"
          sed -En 's/^[[:space:]]*(export[[:space:]]+)?([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*=.*/\2/p' "apps/landing-page/.env.${{ needs.resolve-env.outputs.ENV_NAME }}" | sort -u | head -n 50

      # ===================== Build & Push Images =====================
      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: ./apps/backend-service
          platforms: linux/amd64
          push: true
          build-args: |
            GIT_SHA=${{ steps.meta.outputs.SHORT_SHA }}
            ENV_NAME=${{ needs.resolve-env.outputs.ENV_NAME }}
          tags: |
            ${{ steps.ns.outputs.NS }}/postmatic-api:${{ needs.resolve-env.outputs.ENV_NAME }}
            ${{ steps.ns.outputs.NS }}/postmatic-api:${{ needs.resolve-env.outputs.ENV_NAME }}-${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build & push Dashboard
        uses: docker/build-push-action@v6
        with:
          context: ./apps/dashboard
          platforms: linux/amd64
          push: true
          build-args: |
            GIT_SHA=${{ steps.meta.outputs.SHORT_SHA }}
            ENV_STAGE=${{ needs.resolve-env.outputs.ENV_NAME }}
          tags: |
            ${{ steps.ns.outputs.NS }}/postmatic-dashboard:${{ needs.resolve-env.outputs.ENV_NAME }}
            ${{ steps.ns.outputs.NS }}/postmatic-dashboard:${{ needs.resolve-env.outputs.ENV_NAME }}-${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build & push Landing
        uses: docker/build-push-action@v6
        with:
          context: ./apps/landing-page
          platforms: linux/amd64
          push: true
          build-args: |
            GIT_SHA=${{ steps.meta.outputs.SHORT_SHA }}
            ENV_STAGE=${{ needs.resolve-env.outputs.ENV_NAME }}
          tags: |
            ${{ steps.ns.outputs.NS }}/postmatic-landing:${{ needs.resolve-env.outputs.ENV_NAME }}
            ${{ steps.ns.outputs.NS }}/postmatic-landing:${{ needs.resolve-env.outputs.ENV_NAME }}-${{ steps.meta.outputs.SHORT_SHA }}

  deploy:
    runs-on: ubuntu-latest
    needs: [resolve-env, build-and-push]
    # ikat juga ke environment yang sama
    environment: ${{ needs.resolve-env.outputs.ENV_NAME }}
    timeout-minutes: 30
    steps:
      - name: SSH into VPS & deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          port:     ${{ secrets.VPS_SSH_PORT }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            # /bin/sh friendly
            set -eu

            ENV_NAME='${{ needs.resolve-env.outputs.ENV_NAME }}'
            SHORT_SHA='${{ needs.build-and-push.outputs.SHORT_SHA }}'
            IMAGE_TAG="${ENV_NAME}-${SHORT_SHA}"

            export COMPOSE_FILE='${{ secrets.COMPOSE_FILE }}'
            export COMPOSE_PROJECT='${{ secrets.COMPOSE_PROJECT }}'
            export ENVFILE='${{ secrets.ENVFILE }}'

            echo "[Context]"
            echo "ENV_NAME=$ENV_NAME SHORT_SHA=$SHORT_SHA IMAGE_TAG=$IMAGE_TAG"
            echo "COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROJECT=$COMPOSE_PROJECT ENVFILE=$ENVFILE"

            echo "Login GHCR (read-only) di VPS..."
            echo '${{ secrets.GHCR_READ_TOKEN }}' | docker login ghcr.io -u '${{ secrets.GHCR_READ_USERNAME }}' --password-stdin

            cd /srv/postmatic

            echo "[Render compose utk verifikasi image/tag]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" config \
              | awk '/services:/{p=1} p && /image:/{print NR": "$0} /networks:/{p=0}'

            echo "[Down stack lama]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" down --remove-orphans || true

            echo "[Pull images]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" pull api dashboard landing

            echo "[Up (force-recreate)]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" up -d --force-recreate api dashboard landing

            echo "[Prisma migrate deploy]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" run --rm api npx -y prisma@5.22.0 migrate deploy

            echo "[Wait for containers healthy]"
            for s in api dashboard landing; do
              echo "  - waiting $s ..."
              cid="$(docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" ps -q "$s")"
              i=0
              while :; do
                i=$((i+1))
                st="$(docker inspect "$cid" --format='{{.State.Status}}' 2>/dev/null || true)"
                hc="$(docker inspect "$cid" --format='{{if .State.Health}}{{.State.Health.Status}}{{end}}' 2>/dev/null || true)"
                echo "    status=$st health=$hc try=$i"
                if [ "$st" = "running" ]; then
                  if [ -z "$hc" ] || [ "$hc" = "healthy" ]; then break; fi
                  if [ "$hc" = "starting" ] && [ "$i" -ge 5 ]; then break; fi
                fi
                [ "$i" -lt 40 ] || { echo "    timeout waiting $s"; exit 1; }
                sleep 3
              done
            done

            #################################################################
            #                        SMOKE TESTS (updated)                  #
            #################################################################
            echo "[Smoke tests]"
            if [ "$ENV_NAME" = "staging" ]; then
              URLS="https://api-staging.postmatic.id/__version https://dashboard-staging.postmatic.id/ https://landing-staging.postmatic.id/"
            else
              URLS="https://api.postmatic.id/__version https://dashboard.postmatic.id/ https://postmatic.id/"
            fi

            http_ok() {
              case "$1" in
                200|204|301|302|307|308) return 0 ;;
                *) return 1 ;;
              esac
            }

            check_external() {
              u="$1"
              i=0
              while [ $i -lt 10 ]; do
                i=$((i+1))
                code="$(curl -skL -o /dev/null -w '%{http_code}' "$u" || true)"
                echo "    try=$i code=$code"
                if http_ok "$code"; then
                  return 0
                fi
                sleep 3
              done
              return 1
            }

            check_internal() {
              svc="$1"; path="$2"
              docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" exec -T "$svc" \
                node -e 'const http=require("http");const p=process.env.PORT||3000;const opts={hostname:"127.0.0.1",port:p,path:process.argv[1]||"/"};http.get(opts,res=>{process.exit(res.statusCode<500?0:1)}).on("error",()=>process.exit(1));' "$path"
            }

            for u in $URLS; do
              echo "  - $u"
              if check_external "$u"; then
                continue
              fi

              # Map URL → service + path untuk probe internal
              svc=""; path="/"
              case "$u" in
                *api-staging.postmatic.id*|*api.postmatic.id*) svc="api"; path="/__version" ;;
                *dashboard-staging.postmatic.id*|*dashboard.postmatic.id*) svc="dashboard"; path="/" ;;
                *) svc="landing"; path="/" ;;
              esac

              echo "    external still failing; trying internal probe: svc=$svc path=$path"
              if check_internal "$svc" "$path"; then
                echo "    OK (internal). Mark success (kemungkinan DNS/SSL/ACME/propagasi belum siap)."
              else
                echo "FAIL: $u (external & internal failed)"
                exit 1
              fi
            done
            #################################################################

            echo "[Cleanup old images]"
            docker image prune -f
