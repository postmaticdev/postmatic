name: ${STAGING_COMPOSE_PROJECT:-postmatic_vps_staging}

services:
  db:
    image: postgres:${STAGING_POSTGRES_TAG:-15-alpine}
    container_name: ${STAGING_PREFIX:-postmatic_stg}_db
    environment:
      POSTGRES_DB: ${STAGING_DATABASE_NAME}
      POSTGRES_USER: ${STAGING_DATABASE_USER}
      POSTGRES_PASSWORD: ${STAGING_DATABASE_PASSWORD}
    volumes:
      - pgdata_stg:/var/lib/postgresql/data
    restart: unless-stopped
    ports:
      - "127.0.0.1:${STAGING_DATABASE_PORT:-15432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${STAGING_DATABASE_USER} -d ${STAGING_DATABASE_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:${STAGING_REDIS_TAG:-7-alpine}
    container_name: ${STAGING_PREFIX:-postmatic_stg}_redis
    command: ["redis-server","--save","","--appendonly","no","--requirepass","${STAGING_REDIS_PASSWORD}"]
    restart: unless-stopped
    ports:
      - "127.0.0.1:${STAGING_REDIS_PORT:-16379}:6379"

  api:
    build: ../../apps/backend-service
    container_name: ${STAGING_PREFIX:-postmatic_stg}_api
    env_file:
      - ../../apps/backend-service/.env.staging
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks: [default, traefik_proxy]
    labels:
      - "traefik.enable=true"

      # HTTP (80) -> redirect ke HTTPS
      - "traefik.http.routers.api-stg-web.rule=Host(`api-staging.postmatic.id`)"
      - "traefik.http.routers.api-stg-web.entrypoints=web"
      - "traefik.http.routers.api-stg-web.middlewares=redirect-https@file"

      # HTTPS (443)
      - "traefik.http.routers.api-stg.rule=Host(`api-staging.postmatic.id`)"
      - "traefik.http.routers.api-stg.entrypoints=websecure"
      - "traefik.http.routers.api-stg.tls=true"
      - "traefik.http.routers.api-stg.tls.certresolver=le-http"
      - "traefik.http.routers.api-stg.middlewares=security-headers@file,compress@file,limit-20mb@file"
      - "traefik.http.services.api-stg.loadbalancer.server.port=3000"

    restart: unless-stopped

  dashboard:
    build:
      context: ../../apps/dashboard
      args:
        ENV_STAGE: "${STAGING_ENV_STAGE:-staging}"
        API_ORIGIN: "${STAGING_API_ORIGIN_INTERNAL:-http://api:3000}"
        NEXT_PUBLIC_API_ORIGIN: "${STAGING_NEXT_PUBLIC_API_ORIGIN:-https://api-staging.postmatic.id}"
    container_name: ${STAGING_PREFIX:-postmatic_stg}_dashboard
    env_file:
      - ../../apps/dashboard/.env.staging
    depends_on:
      - api
    networks: [default, traefik_proxy]
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.dashboard-stg-web.rule=Host(`dashboard-staging.postmatic.id`)"
      - "traefik.http.routers.dashboard-stg-web.entrypoints=web"
      - "traefik.http.routers.dashboard-stg-web.middlewares=redirect-https@file"

      - "traefik.http.routers.dashboard-stg.rule=Host(`dashboard-staging.postmatic.id`)"
      - "traefik.http.routers.dashboard-stg.entrypoints=websecure"
      - "traefik.http.routers.dashboard-stg.tls=true"
      - "traefik.http.routers.dashboard-stg.tls.certresolver=le-http"
      - "traefik.http.routers.dashboard-stg.middlewares=security-headers@file,compress@file"
      - "traefik.http.services.dashboard-stg.loadbalancer.server.port=3000"

    restart: unless-stopped

  landing:
    build:
      context: ../../apps/landing-page
      args:
        ENV_STAGE: "${STAGING_ENV_STAGE:-staging}"
    container_name: ${STAGING_PREFIX:-postmatic_stg}_landing
    env_file:
      - ../../apps/landing-page/.env.staging
    networks: [default, traefik_proxy]
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.landing-stg-web.rule=Host(`landing-staging.postmatic.id`)"
      - "traefik.http.routers.landing-stg-web.entrypoints=web"
      - "traefik.http.routers.landing-stg-web.middlewares=redirect-https@file"

      - "traefik.http.routers.landing-stg.rule=Host(`landing-staging.postmatic.id`)"
      - "traefik.http.routers.landing-stg.entrypoints=websecure"
      - "traefik.http.routers.landing-stg.tls=true"
      - "traefik.http.routers.landing-stg.tls.certresolver=le-http"
      - "traefik.http.routers.landing-stg.middlewares=security-headers@file,compress@file"
      - "traefik.http.services.landing-stg.loadbalancer.server.port=3000"

    restart: unless-stopped

networks:
  traefik_proxy:
    external: true

volumes:
  pgdata_stg:
