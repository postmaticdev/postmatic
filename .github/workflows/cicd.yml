name: CI/CD Postmatic

on:
  push:
    branches: [stg, main]   # stg = staging, main = production
  workflow_dispatch:
    inputs:
      environment:
        description: "Target environment (staging|production)"
        required: true
        default: "staging"
      ref:
        description: "Git ref (branch/tag/sha) to build"
        required: false

permissions:
  contents: read
  packages: write

concurrency:
  group: postmatic-${{ github.ref_name }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    outputs:
      ENV_NAME:  ${{ steps.meta.outputs.ENV_NAME }}
      SHORT_SHA: ${{ steps.meta.outputs.SHORT_SHA }}
      NS:        ${{ steps.ns.outputs.NS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Derive environment
        id: meta
        shell: bash
        run: |
          if [[ "${GITHUB_EVENT_NAME}" == "workflow_dispatch" ]]; then
            ENV_NAME="${{ github.event.inputs.environment }}"
          else
            case "${GITHUB_REF_NAME}" in
              stg)  ENV_NAME="staging" ;;
              main) ENV_NAME="production" ;;
              *)    echo "Unknown branch: ${GITHUB_REF_NAME}. Use workflow_dispatch with inputs.environment"; exit 1 ;;
            esac
          fi
          SHORT_SHA="$(git rev-parse --short=8 HEAD)"
          echo "ENV_NAME=$ENV_NAME"   | tee -a "$GITHUB_OUTPUT"
          echo "SHORT_SHA=$SHORT_SHA" | tee -a "$GITHUB_OUTPUT"

      - name: Compute image namespace (GHCR)
        id: ns
        shell: bash
        run: |
          echo "NS=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"
          echo "Using namespace: ghcr.io/${GITHUB_REPOSITORY_OWNER,,}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ===== Tulis env FE dari Secrets agar Next.js baca saat build =====
      - name: Write dashboard env (staging)
        if: ${{ steps.meta.outputs.ENV_NAME == 'staging' }}
        run: |
          printf "%s" "${{ secrets.DASHBOARD_ENV_STAGING }}" > apps/dashboard/.env.staging

      - name: Write dashboard env (production)
        if: ${{ steps.meta.outputs.ENV_NAME == 'production' }}
        run: |
          printf "%s" "${{ secrets.DASHBOARD_ENV_PRODUCTION }}" > apps/dashboard/.env.production

      - name: Write landing env (staging)
        if: ${{ steps.meta.outputs.ENV_NAME == 'staging' }}
        run: |
          printf "%s" "${{ secrets.LANDING_ENV_STAGING }}" > apps/landing-page/.env.staging

      - name: Write landing env (production)
        if: ${{ steps.meta.outputs.ENV_NAME == 'production' }}
        run: |
          printf "%s" "${{ secrets.LANDING_ENV_PRODUCTION }}" > apps/landing-page/.env.production

      # ===================== Build & Push Images =====================

      - name: Build & push API
        uses: docker/build-push-action@v6
        with:
          context: ./apps/backend-service
          platforms: linux/amd64
          push: true
          build-args: |
            GIT_SHA=${{ steps.meta.outputs.SHORT_SHA }}
            ENV_NAME=${{ steps.meta.outputs.ENV_NAME }}
          tags: |
            ${{ steps.ns.outputs.NS }}/postmatic-api:${{ steps.meta.outputs.ENV_NAME }}
            ${{ steps.ns.outputs.NS }}/postmatic-api:${{ steps.meta.outputs.ENV_NAME }}-${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build & push Dashboard
        uses: docker/build-push-action@v6
        with:
          context: ./apps/dashboard
          platforms: linux/amd64
          push: true
          build-args: |
            GIT_SHA=${{ steps.meta.outputs.SHORT_SHA }}
            ENV_NAME=${{ steps.meta.outputs.ENV_NAME }}
          tags: |
            ${{ steps.ns.outputs.NS }}/postmatic-dashboard:${{ steps.meta.outputs.ENV_NAME }}
            ${{ steps.ns.outputs.NS }}/postmatic-dashboard:${{ steps.meta.outputs.ENV_NAME }}-${{ steps.meta.outputs.SHORT_SHA }}

      - name: Build & push Landing
        uses: docker/build-push-action@v6
        with:
          context: ./apps/landing-page
          platforms: linux/amd64
          push: true
          build-args: |
            GIT_SHA=${{ steps.meta.outputs.SHORT_SHA }}
            ENV_NAME=${{ steps.meta.outputs.ENV_NAME }}
          tags: |
            ${{ steps.ns.outputs.NS }}/postmatic-landing:${{ steps.meta.outputs.ENV_NAME }}
            ${{ steps.ns.outputs.NS }}/postmatic-landing:${{ steps.meta.outputs.ENV_NAME }}-${{ steps.meta.outputs.SHORT_SHA }}

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: build-and-push
    environment: ${{ needs.build-and-push.outputs.ENV_NAME }}
    steps:
      - name: SSH into VPS & deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          host:     ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_SSH_USER }}
          port:     ${{ secrets.VPS_SSH_PORT }}
          key:      ${{ secrets.VPS_SSH_KEY }}
          script_stop: true
          script: |
            set -euo pipefail

            ENV_NAME='${{ needs.build-and-push.outputs.ENV_NAME }}'
            SHORT_SHA='${{ needs.build-and-push.outputs.SHORT_SHA }}'
            IMAGE_TAG="${ENV_NAME}-${SHORT_SHA}"

            export COMPOSE_FILE='${{ secrets.COMPOSE_FILE }}'
            export COMPOSE_PROJECT='${{ secrets.COMPOSE_PROJECT }}'
            export ENVFILE='${{ secrets.ENVFILE }}'

            echo "[Context]"
            echo "ENV_NAME=$ENV_NAME SHORT_SHA=$SHORT_SHA IMAGE_TAG=$IMAGE_TAG"
            echo "COMPOSE_FILE=$COMPOSE_FILE COMPOSE_PROJECT=$COMPOSE_PROJECT ENVFILE=$ENVFILE"

            echo "Login GHCR (read-only) di VPS..."
            echo '${{ secrets.GHCR_READ_TOKEN }}' | docker login ghcr.io -u '${{ secrets.GHCR_READ_USERNAME }}' --password-stdin

            cd /srv/postmatic

            echo "[Render compose utk verifikasi image/tag]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" config \
              | awk '/services:/{p=1} p && /image:/{print NR": "$0} /networks:/{p=0}'

            echo "[Turunkan stack lama]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" down --remove-orphans || true

            echo "[Pull images]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" pull api dashboard landing

            echo "[Up (force-recreate)]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" up -d --force-recreate api dashboard landing

            echo "[Prisma migrate deploy]"
            IMAGE_TAG="$IMAGE_TAG" docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" run --rm api npx -y prisma@5.22.0 migrate deploy

            echo "[Wait for containers healthy]"
            for s in api dashboard landing; do
              echo "  - waiting $s ..."
              cid="$(docker compose --env-file "$ENVFILE" -f "$COMPOSE_FILE" -p "$COMPOSE_PROJECT" ps -q $s)"
              for i in $(seq 1 40); do
                st="$(docker inspect "$cid" --format='{{.State.Status}}' 2>/dev/null || true)"
                hc="$(docker inspect "$cid" --format='{{if .State.Health}}{{.State.Health.Status}}{{end}}' 2>/dev/null || true)"
                echo "    status=$st health=$hc try=$i"
                if [ "$st" = "running" ] && { [ -z "$hc" ] || [ "$hc" = "healthy" ] || [ "$hc" = "starting" -a $i -ge 5 ]; }; then
                  break
                fi
                sleep 3
              done
            done

            echo "[Smoke tests]"
            if [ "$ENV_NAME" = "staging" ]; then
              URLS=("https://api-staging.postmatic.id/__version" "https://dashboard-staging.postmatic.id/" "https://landing-staging.postmatic.id/")
            else
              URLS=("https://api.postmatic.id/__version" "https://dashboard.postmatic.id/" "https://postmatic.id/")
            fi
            for u in "${URLS[@]}"; do
              echo "  - $u"
              ok=0
              for i in $(seq 1 10); do
                code="$(curl -skL -o /dev/null -w '%{http_code}' "$u" || true)"
                echo "    try=$i code=$code"
                case "$code" in
                  200|204|301|302) ok=1; break;;
                  *) sleep 3;;
                esac
              done
              [ $ok -eq 1 ] || { echo "FAIL: $u (last code=$code)"; exit 1; }
            done

            echo "[Cleanup old images]"
            docker image prune -f
