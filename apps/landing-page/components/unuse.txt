          {/* Tabs */}
          <Tabs defaultValue="subscription" className="w-full">
            <TabsList className="grid grid-cols-2 w-full max-w-xs mx-auto mb-12 bg-slate-600 text-white">
              <TabsTrigger value="subscription" className="px-4 ">
                {texts.pricing.tabs.subscription}
              </TabsTrigger>
              <TabsTrigger value="tokens" className="px-4 ">
                {texts.pricing.tabs.tokens}
              </TabsTrigger>
            </TabsList>

            {/* Subscription plans */}
            <TabsContent value="subscription">
              <div className="grid lg:grid-cols-3 gap-6 lg:gap-8">
                {texts.pricing.plans.map((plan) => {
                  const Icon = iconsMap[plan.icon as keyof typeof iconsMap];
                  return (
                    <div
                      key={plan.id}
                      className={`relative rounded-2xl shadow-lg border-2 my-4 lg:my-0 transition-all duration-300 dark:bg-slate-800 dark:border-slate-700 ${
                        plan.popular
                          ? "border-blue-500 scale-105 dark:border-blue-400"
                          : "border-gray-200 dark:border-slate-700"
                      }`}
                    >
                      {plan.popular && (
                        <div className="absolute -top-4 left-1/2 -translate-x-1/2">
                          <Badge className="bg-gradient-to-r from-primary to-secondary text-white">
                            {texts.pricing.badge}
                          </Badge>
                        </div>
                      )}

                      <div className="p-6 sm:p-8">
                        <div className="flex items-center space-x-3 mb-6">
                          <div
                            className={`w-12 h-12 bg-gradient-to-r ${plan.color} rounded-xl flex items-center justify-center`}
                          >
                            <Icon className="h-6 w-6 text-white" />
                          </div>
                          <h3 className="text-2xl font-bold text-gray-900 dark:text-white">
                            {plan.name}
                          </h3>
                        </div>

                        {/* Pricing cards - harga di atas/bawah */}
                        {plan.items.length === 1 ? (
                          // Jika hanya 1 item, tampilkan langsung
                          <div className="p-4 rounded-lg border dark:border-slate-600">
                            <div className="flex items-center justify-between mb-2">
                              <span className="font-semibold text-gray-900 dark:text-white">
                                {plan.items[0].name}
                              </span>
                              {plan.items[0].description && (
                                <Badge
                                  variant="secondary"
                                  className="text-xs text-gray-900 dark:text-white"
                                >
                                  {texts.pricing.saveBadge}
                                </Badge>
                              )}
                            </div>

                            <div className="space-y-1">
                              <div className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">
                                {plan.items[0].price === 0
                                  ? "Gratis"
                                  : formatCurrency(plan.items[0].price)}
                              </div>
                            </div>

                            <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                              {plan.items[0].tokenImage.toLocaleString("id-ID")}{" "}
                              {texts.pricing.tokenUnit} •{" "}
                              {texts.pricing.validFor.replace(
                                "{days}",
                                String(plan.items[0].tokenValidFor)
                              )}
                            </p>
                          </div>
                        ) : (
                          // Jika lebih dari 1 item, gunakan nested tabs
                          <Tabs
                            defaultValue={plan.items[0].id}
                            className="w-full"
                          >
                            <TabsList className="grid grid-cols-2 w-full max-w-xs mx-auto  bg-slate-600 text-white">
                              {plan.items.map((item) => (
                                <TabsTrigger
                                  key={item.id}
                                  value={item.id}
                                  className="text-sm"
                                >
                                  {item.name}
                                </TabsTrigger>
                              ))}
                            </TabsList>

                            {plan.items.map((item) => (
                              <TabsContent key={item.id} value={item.id}>
                                <div className="p-4 rounded-lg border dark:border-slate-600">
                                  <div className="flex items-center justify-between mb-2">
                                    <span className="font-semibold text-gray-900 dark:text-white">
                                      {item.name}
                                    </span>
                                    {item.description && (
                                      <Badge
                                        variant="secondary"
                                        className="text-xs text-gray-900 dark:text-white"
                                      >
                                        {texts.pricing.saveBadge}
                                      </Badge>
                                    )}
                                  </div>

                                  <div className="space-y-1">
                                    {item.originalPrice &&
                                      item.originalPrice > item.price && (
                                        <span className="text-sm text-gray-500 dark:text-gray-400 line-through">
                                          {formatCurrency(item.originalPrice)}
                                        </span>
                                      )}
                                    <div className="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">
                                      {item.price === 0
                                        ? "Gratis"
                                        : formatCurrency(item.price)}
                                    </div>
                                  </div>

                                  <p className="text-sm text-gray-600 dark:text-gray-300 mt-1">
                                    {item.tokenImage.toLocaleString("id-ID")}{" "}
                                    {texts.pricing.tokenUnit} •{" "}
                                    {texts.pricing.validFor.replace(
                                      "{days}",
                                      String(item.tokenValidFor)
                                    )}
                                  </p>
                                </div>
                              </TabsContent>
                            ))}
                          </Tabs>
                        )}

                        {/* Benefits */}
                        <div className="space-y-3 mb-8 mt-3">
                          {plan.benefits.map((b, i) => (
                            <div key={i} className="flex items-start space-x-2">
                              <Check className="h-5 w-5 text-green-500 flex-shrink-0 mt-0.5" />
                              <span className="text-gray-600 dark:text-gray-300 text-sm">
                                {b}
                              </span>
                            </div>
                          ))}
                        </div>

                        <Button
                          className={`bg-gradient-to-r from-primary to-secondary hover:from-secondary hover:to-primary hover:scale-[1.02] text-white w-full`}
                        >
                          {plan.name === "Free"
                            ? texts.pricing.cta.free
                            : texts.pricing.cta.paid}
                        </Button>
                      </div>
                    </div>
                  );
                })}
              </div>
            </TabsContent>

            {/* Token packs */}
            <TabsContent value="tokens">
              <div className="max-w-4xl mx-auto">
                <div className="text-center mb-8">
                  <h3 className="text-2xl font-semibold text-gray-900 dark:text-white mb-2">
                    {texts.pricing.tokenTitle}
                  </h3>
                  <p className="text-gray-600 dark:text-gray-300">
                    {texts.pricing.tokenSubtitle}
                  </p>
                </div>

                <div className="grid sm:grid-cols-2 lg:grid-cols-3 gap-6">
                  {texts.pricing.tokens.map((pack) => (
                    <div
                      key={pack.id}
                      className="bg-white dark:bg-slate-800 rounded-xl shadow-lg border border-gray-200 dark:border-slate-700 p-6 hover:shadow-xl transition-shadow"
                    >
                      <div className="text-center mb-6">
                        <div className="w-16 h-16 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
                          <Zap className="h-8 w-8 text-white" />
                        </div>
                        <h4 className="text-xl font-bold text-gray-900 dark:text-white">
                          {pack.token.toLocaleString("id-ID")}{" "}
                          {texts.pricing.tokenUnit}
                        </h4>
                        <p className="text-gray-600 dark:text-gray-300 text-sm">
                          {texts.pricing.validFor.replace(
                            "{days}",
                            String(pack.tokenValidFor)
                          )}
                        </p>
                      </div>

                      <div className="text-center mb-6">
                        <div className="text-3xl font-bold text-gray-900 dark:text-white mb-1">
                          {formatCurrency(pack.price)}
                        </div>
                        <div className="text-sm text-gray-500 dark:text-gray-400">
                          {texts.pricing.perToken.replace(
                            "{price}",
                            formatCurrency(pack.price / pack.token)
                          )}
                        </div>
                      </div>

                      <Button className="w-full bg-orange-600 hover:bg-orange-700 text-white">
                        {texts.pricing.cta.token}
                      </Button>
                    </div>
                  ))}
                </div>

                <div className="mt-12 text-center bg-blue-50 dark:bg-slate-800 rounded-xl p-6">
                  <h4 className="text-lg font-semibold text-blue-900 dark:text-blue-300 mb-2">
                    {texts.pricing.enterpriseHelp.title}
                  </h4>
                  <p className="text-blue-700 dark:text-blue-400 mb-4">
                    {texts.pricing.enterpriseHelp.desc}
                  </p>
                  <Link href={LOGIN_URL}>
                    <Button
                      variant="outline"
                      className="border-blue-600 text-blue-600 dark:border-blue-400 dark:text-blue-400 hover:bg-blue-600 hover:text-white dark:hover:bg-blue-500"
                    >
                      {texts.pricing.cta.sales}
                    </Button>
                  </Link>
                </div>
              </div>
            </TabsContent>
          </Tabs>